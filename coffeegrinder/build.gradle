buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
      force "${saxonGroup}:${saxonEdition}:${saxonVersion}"
      force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
      force "xerces:xercesImpl:${xercesVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id 'java-library'
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "4.1.2"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.5'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.docker.DockerContainer
import java.nio.file.Paths
import java.nio.file.Files

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force "${saxonGroup}:${saxonEdition}:${saxonVersion}"
    force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
    force "xerces:xercesImpl:${xercesVersion}"
  }
}

configurations {
  transform.extendsFrom documentation
}

dependencies {
  compileOnly (
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' ],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )

  testImplementation (
    [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30' ]
  )

  testRuntimeOnly (
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )

  documentation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion],
    [group: 'com.saxonica', name: 'xmldoclet', version: xmldocletVersion],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )
}

testing {
  suites {
    test {
      useJUnitJupiter('5.9.2')
    }
  }
}

test {
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

buildConfig {
  packageName("org.nineml.${grinderName}")
  buildConfigField('String', 'TITLE', "\"${grinderTitle}\"")
  buildConfigField('String', 'VERSION', "\"${ninemlVersion}\"")
}

ext {
  c_coffeegrinder = "coffeegrinder"
}

docker_container.configure {
  workingDir = "docker"
}

// ============================================================

jar {
  archiveBaseName = "${grinderTitle}-${ninemlVersion}"
  manifest {
    attributes 'Built-By': 'Norman Walsh'
    attributes 'Implementation-Vendor': 'Norman Walsh'
    attributes 'Implementation-Title': grinderTitle
    attributes 'Implementation-Version': ninemlVersion
  }
}

javadoc {
  exclude "org/nineml/coffeegrinder/BuildConfig.java"
  title "${grinderTitle}, Earley and GLL parsers in Java"
  options.overview = "src/main/java/org/nineml/coffeegrinder/overview.html"
  options.memberLevel = JavadocMemberLevel.PUBLIC
}

tasks.register('xmljavadoc', Javadoc) {
  classpath = configurations.transform
  source = sourceSets.main.allJava
  destinationDir = file("${buildDir}/xmldoc")
  options.doclet = 'com.saxonica.xmldoclet.XmlDoclet'
  options.docletpath = configurations.documentation.files.asType(List)
  options.addStringOption("sourcepath", "${projectDir}/src/main/java")
}

task dist(dependsOn:["test", "jar", "javadoc"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${buildDir}/docs"
      into "${buildDir}/stage/docs"
    }
  }
  doLast {
    copy {
      from "${projectDir}/docs"
      into "${buildDir}/stage/docs/examples"
    }
  }
  doLast {
    copy {
      from "${projectDir}/README.md"
      into "${buildDir}/stage/docs"
      filter { String line ->
        line.replace("[docs](docs)", "[examples](examples)")
      }
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${grinderName}-${ninemlVersion}"
  archiveFileName = "${grinderName}-${ninemlVersion}.zip"
}
dist.finalizedBy zipDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ['generateBuildConfig']) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

// ============================================================

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = grinderTitle
        packaging = 'jar'
        description = 'Earley and Generalized LL parsers'
        url = 'https://github.com/nineml/coffeegrinder'

        scm {
          url = 'scm:git@github.com:nineml/coffeegrinder.git'
          connection = 'scm:git@github.com:nineml/coffeegrinder.git'
          developerConnection = 'scm:git@github.com:nineml/coffeegrinder.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "org.nineml"
      artifactId = grinderName
      version = ninemlVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = project.findProperty("sonatypeUsername") ?: "NOUSER"
        password = project.findProperty("sonatypePassword") ?: "NOPASS"
      }
    }
  }
}

// ======================================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_coffeegrinder)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "coffeegrinder"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_coffeegrinder)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "coffeegrinder"]
      }
    }
  }
}

// ======================================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
